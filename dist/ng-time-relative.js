!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.ngTimeRelative=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

exports = module.exports = function(module) {
  module.

    constant('timeRelativeConfig', {
      calendar: {
        en: {
          lastDay : '[Yesterday], LT',
          sameDay : '[Today], LT',
          nextDay : '[Tomorrow], LT',
          lastWeek : 'dddd, LT',
          nextWeek : 'Next dddd, LT',
          sameElse : 'LL'
        }
      }
    }).

    directive('relative', directive).

    run(['moment', 'timeRelativeConfig', function(moment, timeRelativeConfig) {
      angular.forEach(timeRelativeConfig.calendar, function(translation, lang) {
        moment.locale(lang, {calendar: translation});
      });
    }]);
};

exports.directive = directive;

if ('angular' in global) {
  var mod = angular.module('timeRelative', []);
  if ('moment' in global) {
    mod.constant('moment', moment);
    moment.locale('en', {});
  }
  exports(mod);
}

function directive($timeout, moment) {
  return {
    restrict: 'AC',
    scope: {
      datetime: '@'
    },
    link: function(scope, element, attrs) {
      var timeout;

      scope.$watch('datetime', function(dateString) {
        $timeout.cancel(timeout);

        var date = moment(dateString);
        if (!date || !date.isValid()) throw new Error('Invalid date');

        var to = function() { return moment(attrs.to); };
        var withoutSuffix = 'withoutSuffix' in attrs;

        if (!attrs.title)
          element.attr('title', date.format('LLLL'));

        function updateTime() {
          element.text(diffString(date, to()));
        }

        function diffString(a, b) {
          if (Math.abs(a.clone().startOf('day').diff(b, 'days', true)) < 1)
            return a.from(b, withoutSuffix);
          else
            return a.calendar(b);
        }

        function updateLater() {
          updateTime();
          timeout = $timeout(function() {
            updateLater();
          }, nextUpdateIn());
        }

        function nextUpdateIn() {
          var delta = Math.abs(moment().diff(date));
          if (delta < 45e3) return 45e3 - delta;
          if (delta < 90e3) return 90e3 - delta;
          if (delta < 45 * 60e3) return 60e3 - (delta + 30e3) % 60e3;
          return 3660e3 - delta % 3600e3;
        }

        element.bind('$destroy', function() {
          $timeout.cancel(timeout);
        });

        updateLater();
      });
    }
  };
}

directive.$inject = ['$timeout', 'moment'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcbiAgbW9kdWxlLlxuXG4gICAgY29uc3RhbnQoJ3RpbWVSZWxhdGl2ZUNvbmZpZycsIHtcbiAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgIGVuOiB7XG4gICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5XSwgTFQnLFxuICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5XSwgTFQnLFxuICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93XSwgTFQnLFxuICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgICBuZXh0V2VlayA6ICdOZXh0IGRkZGQsIExUJyxcbiAgICAgICAgICBzYW1lRWxzZSA6ICdMTCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLlxuXG4gICAgZGlyZWN0aXZlKCdyZWxhdGl2ZScsIGRpcmVjdGl2ZSkuXG5cbiAgICBydW4oWydtb21lbnQnLCAndGltZVJlbGF0aXZlQ29uZmlnJywgZnVuY3Rpb24obW9tZW50LCB0aW1lUmVsYXRpdmVDb25maWcpIHtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aW1lUmVsYXRpdmVDb25maWcuY2FsZW5kYXIsIGZ1bmN0aW9uKHRyYW5zbGF0aW9uLCBsYW5nKSB7XG4gICAgICAgIG1vbWVudC5sb2NhbGUobGFuZywge2NhbGVuZGFyOiB0cmFuc2xhdGlvbn0pO1xuICAgICAgfSk7XG4gICAgfV0pO1xufTtcblxuZXhwb3J0cy5kaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbmlmICgnYW5ndWxhcicgaW4gZ2xvYmFsKSB7XG4gIHZhciBtb2QgPSBhbmd1bGFyLm1vZHVsZSgndGltZVJlbGF0aXZlJywgW10pO1xuICBpZiAoJ21vbWVudCcgaW4gZ2xvYmFsKSB7XG4gICAgbW9kLmNvbnN0YW50KCdtb21lbnQnLCBtb21lbnQpO1xuICAgIG1vbWVudC5sb2NhbGUoJ2VuJywge30pO1xuICB9XG4gIGV4cG9ydHMobW9kKTtcbn1cblxuZnVuY3Rpb24gZGlyZWN0aXZlKCR0aW1lb3V0LCBtb21lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0FDJyxcbiAgICBzY29wZToge1xuICAgICAgZGF0ZXRpbWU6ICdAJ1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICB2YXIgdGltZW91dDtcblxuICAgICAgc2NvcGUuJHdhdGNoKCdkYXRldGltZScsIGZ1bmN0aW9uKGRhdGVTdHJpbmcpIHtcbiAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRpbWVvdXQpO1xuXG4gICAgICAgIHZhciBkYXRlID0gbW9tZW50KGRhdGVTdHJpbmcpO1xuICAgICAgICBpZiAoIWRhdGUgfHwgIWRhdGUuaXNWYWxpZCgpKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0ZScpO1xuXG4gICAgICAgIHZhciB0byA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9tZW50KGF0dHJzLnRvKTsgfTtcbiAgICAgICAgdmFyIHdpdGhvdXRTdWZmaXggPSAnd2l0aG91dFN1ZmZpeCcgaW4gYXR0cnM7XG5cbiAgICAgICAgaWYgKCFhdHRycy50aXRsZSlcbiAgICAgICAgICBlbGVtZW50LmF0dHIoJ3RpdGxlJywgZGF0ZS5mb3JtYXQoJ0xMTEwnKSk7XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGltZSgpIHtcbiAgICAgICAgICBlbGVtZW50LnRleHQoZGlmZlN0cmluZyhkYXRlLCB0bygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkaWZmU3RyaW5nKGEsIGIpIHtcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoYS5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLmRpZmYoYiwgJ2RheXMnLCB0cnVlKSkgPCAxKVxuICAgICAgICAgICAgcmV0dXJuIGEuZnJvbShiLCB3aXRob3V0U3VmZml4KTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gYS5jYWxlbmRhcihiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUxhdGVyKCkge1xuICAgICAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICAgICAgICB0aW1lb3V0ID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1cGRhdGVMYXRlcigpO1xuICAgICAgICAgIH0sIG5leHRVcGRhdGVJbigpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5leHRVcGRhdGVJbigpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBNYXRoLmFicyhtb21lbnQoKS5kaWZmKGRhdGUpKTtcbiAgICAgICAgICBpZiAoZGVsdGEgPCA0NWUzKSByZXR1cm4gNDVlMyAtIGRlbHRhO1xuICAgICAgICAgIGlmIChkZWx0YSA8IDkwZTMpIHJldHVybiA5MGUzIC0gZGVsdGE7XG4gICAgICAgICAgaWYgKGRlbHRhIDwgNDUgKiA2MGUzKSByZXR1cm4gNjBlMyAtIChkZWx0YSArIDMwZTMpICUgNjBlMztcbiAgICAgICAgICByZXR1cm4gMzY2MGUzIC0gZGVsdGEgJSAzNjAwZTM7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LmJpbmQoJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRpbWVvdXQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB1cGRhdGVMYXRlcigpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5kaXJlY3RpdmUuJGluamVjdCA9IFsnJHRpbWVvdXQnLCAnbW9tZW50J107XG4iXX0=
},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;base64,
